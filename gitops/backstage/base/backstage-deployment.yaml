apiVersion: v1
kind: Namespace
metadata:
  name: backstage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: red-hat-developer-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      serviceAccountName: backstage-sa
      securityContext:
        runAsUser: 1000
      containers:
        - name: backstage
          image: quay.io/rhdh/developer-hub-rhel9:1.0-8
          env:
            - name: GH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: GH_TOKEN
            - name: GH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: GH_CLIENT_ID
            - name: GH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: GH_CLIENT_SECRET
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_ID
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: AWS_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: AWS_REGION
            - name: ARGO_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: backstage-secret
                  key: ARGO_API_TOKEN
          securityContext:
            allowPrivilegeEscalation: true
          ports:
            - name: http
              containerPort: 7007
          volumeMounts:
            - name: app-config
              mountPath: /app/app-config-from-configmap.yaml
              subPath: app-config.yaml
          args:
            - '--config'
            - /app/app-config-from-configmap.yaml
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: oauth-proxy
          ports:
            - name: oauth-proxy
              containerPort: 8888
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: backstage-tls
              mountPath: /etc/tls/private
          terminationMessagePolicy: File
          image: 'registry.redhat.io/openshift4/ose-oauth-proxy:v4.12'
          args:
            - '-provider=openshift'
            - '-https-address=:8888'
            - '-http-address='
            - '-email-domain=*'
            - '-upstream=http://localhost:7007'
            - '-tls-cert=/etc/tls/private/tls.crt'
            - '-tls-key=/etc/tls/private/tls.key'
            - '-cookie-secret="b29mZXF1b292aWU0cGhhdGFiN2lpa2FlNWVlZ2VlQjQK"'
            - '-openshift-service-account=backstage-sa'
            - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            - '-skip-auth-regex=^/metrics'
            - '-skip-provider-button'
            - '-request-logging=true'
      imagePullSecrets:
      - name: rhdh-pull-secret
      volumes:
      - name: app-config
        configMap:
          name: app-config
          items: 
            - key: app-config.yaml
              path: app-config.yaml
      - name: backstage-tls
        secret:
          secretName: backstage-tls
          defaultMode: 420
---
apiVersion: v1
kind: Service
metadata:
  name: backstage-service
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: backstage-tls
spec:
  selector:
    app: backstage
  ports:
    - name: oauth-proxy
      protocol: TCP
      port: 8888
      targetPort: oauth-proxy
    - name: http
      protocol: TCP
      port: 7007
      targetPort: http
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: backstage-route
spec:
  to:
    kind: Service
    name: backstage-service
  # port:
  #   targetPort: oauth-proxy
  # tls:
  #   termination: reencrypt
  port:
    targetPort: http
  tls:
    termination: edge

